cmake_minimum_required(VERSION 3.12.0)
project(uml-cpp VERSION 0.1.0)
include(CTest)
enable_testing()

option(UML_CLIENT_SERVER "allows for building of src/cpp/uml/managers for restful server client classes" ON)
option(UML_BUILD_TESTS "build tests for uml library" ON)
option(UML_DEBUG "builds with debug tools and without optimizations" OFF)

if (UML_DEBUG)
    add_definitions( -DUML_DEBUG )
endif()

set (CMAKE_CXX_STANDARD 17)

set(CMAKE_AUTOMOC ON)
set (CMAKE_INCLUDE_CURRENT_DIR ON)

find_package(Threads REQUIRED)

IF(UNIX)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    add_compile_options(-Wall -Wextra -pedantic)
    IF(NOT UML_DEBUG) 
        message(STATUS "Optimizations enabled!")
        add_compile_options(-O3)
    ELSE()
        message(STATUS "debug build")
        add_compile_options(-O0 -fstandalone-debug)
    ENDIF()
ENDIF()

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang") 
    option(UML_ADDRESS_SANITIZER "link executables to google address sanitizer" OFF)
endif()

# Headers
include_directories(include)

# Google Test dependency
IF(WIN32)
    set(gtest_force_shared_crt ON)
ENDIF()
add_subdirectory(libs/googletest)

# yaml-cpp dependency
add_subdirectory(libs/yaml-cpp)
set(YAML_CPP_BUILD_TESTS OFF)

# src
add_subdirectory(src/cpp/uml)
if(UML_CLIENT_SERVER)
    list(APPEND umlSources managers/protocol/umlServer.cpp managers/protocol/abstractClient.cpp)
else() 
    add_definitions( -DNO_UML_CLIENT_SERVER)
endif()
list(TRANSFORM umlSources PREPEND "src/cpp/uml/")
add_library(uml STATIC ${umlSources})
target_include_directories(uml PUBLIC include)
target_link_libraries(uml PUBLIC yaml-cpp)
if (UML_CLIENT_SERVER)
    add_executable(uml-server src/cpp/uml/managers/protocol/main.cpp)
    target_link_libraries(uml-server PUBLIC uml)
    target_link_libraries(uml-server PRIVATE Threads::Threads)
    if (UML_DEBUG AND UML_ADDRESS_SANITIZER) 
        target_link_libraries(uml-server PRIVATE -fsanitize=address -fno-omit-frame-pointer)
    endif()
    if(WIN32)
        target_link_libraries(uml-server PRIVATE wsock32 ws2_32)
        target_link_libraries(uml PRIVATE wsock32 ws2_32)
    endif()
endif()
if (UML_BUILD_TESTS)
    add_subdirectory(src/cpp/test)
    list(TRANSFORM umltestSources PREPEND "src/cpp/test/")
    if (UML_CLIENT_SERVER)
        list(APPEND umltestSources src/cpp/test/restfulTest.cpp)
    endif()
    add_executable(umltest ${umltestSources})
    target_link_libraries(umltest PUBLIC gtest gmock gtest_main uml)
    if (UML_DEBUG AND UML_ADDRESS_SANITIZER) 
        target_link_libraries(umltest PRIVATE -fsanitize=address -fno-omit-frame-pointer)
    endif()
    add_test(umltest umltest)
endif()


set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
